    func test_<<<NAME>>>_<<<DATASET>>>() {
        for iter in 1...<<<ITERATIONS>>> {
            for param in params {
            
                let clustererOriginal = <<<CLASSIFIER>>>(copyFrom: param)
                let clustererMorphed = <<<CLASSIFIER>>>(copyFrom: param)
    
                let file = "Tests/morphdata/<<<DATASET>>>_\\(iter).arff"
                let morphFile = "Tests/morphdata/<<<DATASET>>>_\\(iter)_<<<NAME>>>.arff"
    
                var deviationsCounts = 0
                var deviationVec = [Int]()
                do {
                    //load training and test data and convert to DataSet
                    let data = try loadArff(atPath: file)
                    let dataMorph = try loadArff(atPath: morphFile)
                    let trainData = try toDataSet(data: data, withoutClass: true)
                    let trainDataMorph = try toDataSet(data: dataMorph, withoutClass: true)
    
                    //train and classify
                    try clustererOriginal.train(trainData)
                    try clustererMorphed.train(trainDataMorph)
    
                    var expectedClustersMap = [Int: Set<Int>]()
                    var morphedClustersMap = [Int: Set<Int>]()
                    for i in 0..<data.count {
                        let originalClass = try trainData.getClass(i)
                        let expectedMorphedClass = <<<EXPECTEDMORPHEDCLASS>>>
                        let morphedClass = try trainDataMorph.getClass(i)
                        expectedClustersMap = putOrCreateKey(key: expectedMorphedClass, val: i, map: expectedClustersMap)
                        morphedClustersMap = putOrCreateKey(key: morphedClass, val: i, map: morphedClustersMap)
                    }

                    //calculate differences in classification
                    morphedClustersMap = flipSameClusters(expectedClustersMap, morphedClustersMap)
                    for i in 0..<data.count {
                        for (cluster, instances) in expectedClustersMap {
                            if instances.contains(i) {
                                if let morphedInstances = morphedClustersMap[cluster] {
                                    if morphedInstances.contains(i) {
                                        deviationVec.append(0)
                                        break
                                    } else {
                                        deviationsCounts += 1
                                        deviationVec.append(1)
                                    }
                                } else {
                                    deviationsCounts += 1
                                    deviationVec.append(1)
                                    break
                                }
                            }
                        }
                    }
                } catch FileError.fileNotFound {
                    print("Input file \\(file) not found")
                } catch FileError.unknownFileType {
                    print("Input file \\(file) has the wrong format")
                } catch let e {
                    print(e)
                }
    
                // write results to file for statistical analysis
                let path = URL(fileURLWithPath: "./Tests/<<<CLASSNAME>>>_output.txt")
                do {
                    try writeResults(to: path, results: deviationVec)
                } catch FileError.fileNotFound {
                    print("Output file \\(file) not found")
                } catch let e {
                    print(e)
                }
                assertMorphTest(type: "exact_class", testsize: deviationVec.count, deviationsCounts: deviationsCounts)
            }
        }
    }
    
